# Generated by Django 4.1.4 on 2022-12-18 14:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_products', models.PositiveIntegerField(default=0)),
                ('final_price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Общая цена')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Имя категории')),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'verbose_name': 'Категорию',
                'verbose_name_plural': 'Категории',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tires',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(max_length=20, unique=True, verbose_name='Артикул')),
                ('status', models.CharField(choices=[('in_stock', 'в наличии'), ('out_stock', 'нет в наличии'), ('running_out', 'заканчивается'), ('coming_soon', 'ожидается')], default='in_stock', max_length=11, verbose_name='Статус')),
                ('brand', models.CharField(max_length=50, verbose_name='Бренд')),
                ('model', models.CharField(max_length=100, verbose_name='Модель')),
                ('title', models.CharField(max_length=255, verbose_name='Наименование')),
                ('diameter', models.CharField(max_length=5, verbose_name='Диаметр')),
                ('width', models.CharField(max_length=5, verbose_name='Ширина')),
                ('slug', models.SlugField(unique=True)),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('description', models.TextField(null=True, verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Цена')),
                ('season', models.CharField(choices=[(None, 'выберите значение'), ('W', 'Зимние'), ('S', 'Летние'), ('A', 'всесезонные')], max_length=1, verbose_name='Сезон')),
                ('prod_country', models.CharField(max_length=50, null=True, verbose_name='Страна производитель')),
                ('prod_year', models.PositiveSmallIntegerField(null=True, verbose_name='Год производства')),
                ('vehicle_type', models.CharField(max_length=50, verbose_name='Тип Т/С')),
                ('profile', models.CharField(max_length=5, verbose_name='Профиль')),
                ('speed_index', models.CharField(max_length=50, verbose_name='Индекс скорости')),
                ('load_index', models.CharField(max_length=50, verbose_name='Индекс нагрузки')),
                ('spikes', models.BooleanField(default=False, verbose_name='Шипы')),
                ('protector_type', models.CharField(max_length=50, verbose_name='Тип протектора')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Шину',
                'verbose_name_plural': 'Шины',
                'ordering': ['brand', 'model'],
            },
        ),
        migrations.CreateModel(
            name='Rims',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(max_length=20, unique=True, verbose_name='Артикул')),
                ('status', models.CharField(choices=[('in_stock', 'в наличии'), ('out_stock', 'нет в наличии'), ('running_out', 'заканчивается'), ('coming_soon', 'ожидается')], default='in_stock', max_length=11, verbose_name='Статус')),
                ('brand', models.CharField(max_length=50, verbose_name='Бренд')),
                ('model', models.CharField(max_length=100, verbose_name='Модель')),
                ('title', models.CharField(max_length=255, verbose_name='Наименование')),
                ('diameter', models.CharField(max_length=5, verbose_name='Диаметр')),
                ('width', models.CharField(max_length=5, verbose_name='Ширина')),
                ('slug', models.SlugField(unique=True)),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('description', models.TextField(null=True, verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Цена')),
                ('bolt_spacing', models.SmallIntegerField(verbose_name='Межболтовое расстояние')),
                ('et', models.SmallIntegerField(verbose_name='ET')),
                ('dia', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='DIA')),
                ('color', models.CharField(max_length=50, verbose_name='Цвет')),
                ('type', models.CharField(choices=[(None, 'выберите тип'), ('alloy', 'легкосплавные'), ('steel', 'стальные')], max_length=5, verbose_name='Тип диска')),
                ('bolts', models.SmallIntegerField(verbose_name='Количество болтов')),
                ('psd', models.CharField(max_length=10, verbose_name='PSD')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Диск',
                'verbose_name_plural': 'Диски',
                'ordering': ['brand', 'model'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=20, verbose_name='Номер телефона')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Клиента',
                'verbose_name_plural': 'Клиенты',
                'ordering': ['user'],
            },
        ),
        migrations.CreateModel(
            name='CartProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('qty', models.PositiveIntegerField(default=1, verbose_name='Количество')),
                ('final_price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Общая цена')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_products', to='mainapp.cart', verbose_name='Корзина')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.customer', verbose_name='Покупатель')),
            ],
        ),
        migrations.AddField(
            model_name='cart',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.customer', verbose_name='Владелец'),
        ),
        migrations.AddField(
            model_name='cart',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='related_cart', to='mainapp.cartproduct'),
        ),
    ]
